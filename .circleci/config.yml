#
# *************************************************
# Copyright (c) 2019, Grant D. Miller
# License MIT: https://opensource.org/licenses/MIT
# **************************************************
#

version: 2.1
executorType: machine
jobs:
  static-analysis:
    docker:
      - image: newtmitch/sonar-scanner:alpine
    working_directory: ~/build
    steps:
      - checkout
      - run: |
         sonar-scanner -Dsonar.projectKey=$SONAR_PROJECT_KEY \
          -Dsonar.branch.name=$CIRCLE_BRANCH  \
          -Dsonar.organization=$SONAR_ORG  \
          -Dsonar.exclusions=tests/**/*,doc/**/*,scripts/**/* \
          -Dsonar.test.inclusions=tests/**/* \
          -Dsonar.sources=src/**/*  \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=$SONAR_AUTH_TOKEN
      - store_artifacts:
          path:  target
  test:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.2-alpine
    working_directory: ~/build
    
    steps:
      - checkout
      - run: find .
      - run: dotnet restore
      - run: dotnet build
      - run: dotnet test --no-build 

  license-headers:
    docker:
      - image: maven:3.5.3-jdk-8-alpine
    working_directory: ~/build
    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: "-Xmx3200m "
    steps:
      - checkout
      - restore_cache:
          keys:
            - csharp-cli-build-lic-2-{{ checksum "pom-rat.xml" }}            
      - run: mvn dependency:go-offline -f pom-rat.xml -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
      - save_cache:
          paths:
            - ~/.m2
          key: csharp-cli-build-lic-2-{{ checksum "pom-rat.xml" }} -f pom-rat.xml
      - run: mvn clean -f pom-rat.xml license:check
  docker-build:
    docker:
      - image: docker:18.09.3
    working_directory: ~/build
    steps:
      - checkout
      - run: |
          DOCKER_TAG=branch-build 
          echo "running docker build script" && pwd && ./scripts/docker-build.sh $REPO $IMAGE_NAME $DOCKER_TAG
  docker-build-push:
    docker:
      - image: docker:18.09.3
    working_directory: ~/build
    steps:
      - checkout
      - run: |
          DOCKER_TAG=0.1
          echo "running docker build script" && pwd && ./scripts/docker-build-and-push.sh $REPO $IMAGE_NAME $DOCKER_TAG $DOCKER_REPO_HOST $DOCKER_USER $DOCKER_PASS
  fossa-scan:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.2-alpine
    working_directory: ~/build
    steps:
      # Install Fossa
      - run: apk add --update curl
      - run: |
          curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh | tac | tac 
      - checkout
      - run: dotnet build
      - run: FOSSA_API_KEY=$FOSSA_API_KEY fossa init      
      - run: FOSSA_API_KEY=$FOSSA_API_KEY fossa analyze
      - run: FOSSA_API_KEY=$FOSSA_API_KEY fossa test
workflows:
  version: 2
  build_test_and_push:
    jobs:
      - test
      - static-analysis
      - fossa-scan:
          filters:
            tags:
              only: /^v*.*.*/
            branches:
              only: master
      - license-headers
      - docker-build:
          requires:
          - test
          - static-analysis
          - license-headers
          filters:
            branches:
              ignore: master
      - docker-build-push:
          requires:
          - test
          - static-analysis
          - license-headers
          filters:
            tags:
              only: /^v*.*.*/
            branches:
              only: master

