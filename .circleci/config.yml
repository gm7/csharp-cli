#
# *************************************************
# Copyright (c) 2019, Grant D. Miller
# License MIT: https://opensource.org/licenses/MIT
# **************************************************
#

version: 2.1
jobs:
  static-analysis:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.2-alpine
    working_directory: ~/build
    steps:
      # Update, upgrade, then install  openssh for a clean checkout
      - run: apk update
      - run: apk upgrade
      - run: apk --no-cache add --update git openssh curl unzip sed grep bash nodejs nodejs-npm
      - run: curl --insecure -o ./sonarscanner.zip -L https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.0.0.1744-linux.zip && unzip sonarscanner.zip && rm sonarscanner.zip && mv sonar-scanner-4.0.0.1744-linux /usr/lib/sonar-scanner && ln -s /usr/lib/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner && cp sonar-scanner-4.0.0.1744-linux/conf/sonar-runner.properties /usr/lib/sonar-scanner/conf/sonar-scanner.properties
      - run: export SONAR_RUNNER_HOME=/usr/lib/sonar-scanner
      #- run: find .
      #- run: cp sonar-scanner-4.0.0.1744-linux/conf/sonar-runner.properties /usr/lib/sonar-scanner/conf/sonar-scanner.properties
      #   ensure Sonar uses the provided Java for musl instead of a borked glibc one
      - run: sed -i 's/use_embedded_jre=true/use_embedded_jre=false/g' /usr/lib/sonar-scanner/bin/sonar-scanner
      - checkout
      - run: find .
      - run: |
         sonar-scanner \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.projectKey=$SONAR_PROJECT_KEY \
          -Dsonar.projectName=$SONAR_PROJECT_KEY \
          -Dsonar.organization=$SONAR_ORG \
          -Dsonar.login=$SONAR_AUTH_TOKEN \
          -Dsonar.branch.name=$CIRCLE_BRANCH \
          -Dsonar.sourceEncoding=UTF-8 \
          -Dsonar.externalIssuesReportPaths=target \
          -Dsonar.verbose=true \
          -Dsonar.projectBaseDir=${CI_PROJECT_DIR} \
          -Dsonar.sources=.       
      - store_artifacts:
          path:  target
  test:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.2-alpine
    working_directory: ~/build  
    steps:
      # Update, upgrade, then install  openssh for a clean checkout
      - run: apk update
      - run: apk upgrade
      - run: apk --no-cache add --update git openssh
      - checkout
      - restore_cache:
          keys:
            - csharp-cli-test-1-{{ checksum "src/obj/project.assets.json" }}            
      - run: dotnet restore
      - save_cache:
          paths:
            - ~/.nuget
          key: csharp-cli-test-1-{{ checksum "src/obj/project.assets.json" }} -f src/obj/project.assets.json
      
      - run: dotnet build
      - run: dotnet test --no-build 

  license-headers:
    docker:
      - image: maven:3.5.3-jdk-8-alpine
    working_directory: ~/build
    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: "-Xmx3200m "
    steps:
       # Update, upgrade, then install openssh for a clean checkout
      - run: apk update
      - run: apk upgrade
      - run: apk --no-cache add --update openssh git
      - checkout
      - restore_cache:
          keys:
            - csharp-cli-build-lic-2-{{ checksum "src/obj/project.assets.json" }}            
      - run: mvn dependency:go-offline -f pom-rat.xml -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
      - save_cache:
          paths:
            - ~/.m2
          key: csharp-cli-build-lic-2-{{ checksum "src/obj/project.assets.json" }} -f src/obj/project.assets.json
      - run: mvn clean -f pom-rat.xml license:check
  docker-build-push:
    docker:
      - image: docker:18.09.3
    working_directory: ~/build
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      # build and push Docker image to dockerhub.
      - run: |
          TAG=0.0.1
          docker build -t grantm/csharp-cli:$TAG .     
          docker login -u $DOCKER_USER -p $DOCKER_PASS
          docker push grantm/csharp-cli:$TAG
          # Tag and push latest
          docker tag grantm/csharp-cli:$TAG grantm/csharp-cli:latest
          docker push grantm/csharp-cli:latest
  fossa-scan:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.2-alpine
    working_directory: ~/build
    steps:
      # Update, upgrade, then install su, curl, bash and openssh
      - run: apk update
      - run: apk upgrade
      - run: set -ex && apk --no-cache add sudo
      - run: apk --no-cache add --update curl bash openssh git
      # Install Fossa
      - run: |
          curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh | tac | tac | sudo bash
      # Install Maven
      - checkout
      - run: FOSSA_API_KEY=$FOSSA_API_KEY fossa init
      - run: FOSSA_API_KEY=$FOSSA_API_KEY fossa analyze
      # Note: The 'fossa test' command must be run after the analyze command has been run, as it is dependent on the previous scan.
      - run: FOSSA_API_KEY=$FOSSA_API_KEY fossa test
  vulnerability-test:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.2-alpine
    working_directory: ~/build
    steps:
      - run: apk update
      - run: apk upgrade
      - run: set -ex && apk --no-cache add sudo
      - run: apk --no-cache add --update nodejs npm openssh git
      - checkout 
      - run: dotnet restore
      - run: sudo npm_config_unsafe_perm=true npm install -g npm@latest
      - run: sudo npm_config_unsafe_perm=true npm install -g snyk@latest
      - run: sudo snyk auth $SNYK_TOKEN
      - run: sudo snyk test --file=csharp-cli.sln || true
workflows:
  version: 2
  build_test_and_push:
    jobs:
      - test
      - static-analysis
      - vulnerability-test
      - license-headers
      - fossa-scan:
          filters:
            tags:
              only: /^v*.*.*/
            branches:
              only: master      
      - docker-build-push:
          requires:
          - test
          - static-analysis
          - license-headers
          filters:
            tags:
              only: /^v*.*.*/
            branches:
              only: master

